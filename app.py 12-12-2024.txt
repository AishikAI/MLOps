from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import pandas as pd
import pickle
import shap
import numpy as np

# Initialize FastAPI app
app = FastAPI()

# Load the trained pipeline
with open("pipeline.pkl", "rb") as f:
    pipeline = pickle.load(f)

# Load feature names
with open("feature_names.pkl", "rb") as f:
    feature_names = pickle.load(f)

# Define input schema
class InputData(BaseModel):
    rotational_speed: float
    torque: float
    tool_wear: float
    twf: int
    hdf: int
    pwf: int
    osf: int

# Feature details for remedies
feature_details = {
    "Rotational speed [rpm]": {
        "problem": "High rotational speed can cause overheating, wear and tear, and mechanical stress.",
        "remedy": (
            "1. Implement automatic speed regulation to maintain safe operational limits.\n"
            "2. Schedule periodic inspections of the motor and gearbox to ensure proper lubrication.\n"
            "3. Use variable frequency drives (VFDs) to adjust speed dynamically based on load requirements."
        ),
    },
    "Torque [Nm]": {
        "problem": "Excessive torque can strain the motor and other mechanical components.",
        "remedy": (
            "1. Install torque limiters to prevent excessive torque buildup.\n"
            "2. Calibrate tools and equipment regularly to ensure accurate torque settings.\n"
            "3. Use real-time torque monitoring sensors to identify abnormalities early."
        ),
    },
    "Tool wear [min]": {
        "problem": "Worn-out tools can reduce efficiency, compromise product quality, and damage equipment.",
        "remedy": (
            "1. Replace tools based on a predictive maintenance schedule rather than after failure.\n"
            "2. Use wear-resistant tool materials (e.g., tungsten carbide or ceramic).\n"
            "3. Implement tool monitoring systems that measure wear in real-time and alert operators."
        ),
    },
    "TWF": {
        "problem": "Tool wear failure occurs when tools are used beyond their operational lifespan, causing damage to the equipment.",
        "remedy": (
            "1. Establish a tool replacement threshold and monitor it rigorously.\n"
            "2. Train operators to identify early signs of wear, such as changes in cutting sound or surface finish quality."
        ),
    },
    "HDF": {
        "problem": "Poor heat dissipation leads to overheating, which can damage motors and bearings.",
        "remedy": (
            "1. Install cooling systems such as heat sinks, fans, or water cooling.\n"
            "2. Clean and maintain ventilation systems to ensure unobstructed airflow.\n"
            "3. Apply thermal monitoring sensors to track and alert for overheating."
        ),
    },
    "PWF": {
        "problem": "Power supply fluctuations can disrupt operations and damage equipment.",
        "remedy": (
            "1. Install surge protectors and voltage regulators.\n"
            "2. Monitor power quality and stabilize fluctuations with uninterruptible power supplies (UPS)."
        ),
    },
    "OSF": {
        "problem": "Operational settings outside safe ranges can lead to system failure.",
        "remedy": (
            "1. Regularly calibrate machines to ensure settings are within safe limits.\n"
            "2. Implement real-time monitoring to alert operators of deviations."
        ),
    },
}

# Define feature order
features = ["Rotational speed [rpm]", "Torque [Nm]", "Tool wear [min]", "TWF", "HDF", "PWF", "OSF"]

@app.get("/", response_class=HTMLResponse)
def serve_ui():
    try:
        with open("predict.html", "r") as f:
            return f.read()
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="predict.html not found")

@app.post("/predict")
def predict(data: InputData):
    try:
        # Convert input to DataFrame
        input_df = pd.DataFrame([{
            "Rotational speed [rpm]": data.rotational_speed,
            "Torque [Nm]": data.torque,
            "Tool wear [min]": data.tool_wear,
            "TWF": data.twf,
            "HDF": data.hdf,
            "PWF": data.pwf,
            "OSF": data.osf
        }])

        # Align input features with the feature names used during training
        aligned_input = pd.DataFrame(columns=feature_names)  # Create an empty DataFrame with correct columns
        for col in input_df.columns:
            aligned_input[col] = input_df[col]  # Add existing input values

        # Fill missing one-hot-encoded columns with 0
        aligned_input.fillna(0, inplace=True)

        # Perform prediction
        prediction = pipeline.predict(aligned_input)
        result = "Failure" if prediction[0] == 1 else "No Failure"

        insights = {}
        if result == "Failure":
            # Use SHAP for explanations
            explainer = shap.TreeExplainer(pipeline.named_steps['rf'])
            shap_values = explainer.shap_values(aligned_input)

            # Handle binary classification SHAP values
            shap_values_for_class = shap_values[1] if isinstance(shap_values, list) else shap_values

            # Identify the most important feature
            individual_shap_values = shap_values_for_class[0]
            most_important_idx = np.argmax(np.abs(individual_shap_values))
            most_important_feature = features[most_important_idx]

            # Add insights
            insights["most_important_feature"] = most_important_feature
            insights["problem"] = feature_details[most_important_feature]["problem"]
            insights["remedy"] = feature_details[most_important_feature]["remedy"]

        return {"result": result, "input": data.dict(), "insights": insights}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error in prediction: {e}")
